#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHP Telegram Bot (geo-filter + dedupe + smart summary)
–í–µ—Ä—Å–∏—è v9-geo-merge-30m

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:
- –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ https://cad.chp.ca.gov/Traffic.aspx
- –≤—ã–±–∏—Ä–∞–µ—Ç Communications Center (–Ω–∞–ø—Ä–∏–º–µ—Ä Inland)
- –ø–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
- –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Details —á–µ—Ä–µ–∑ __doPostBack
- –¥–æ—Å—Ç–∞—ë—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–µ—Ç–∞–ª–∏, –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã
- —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –û–î–ò–ù –†–ê–ó –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç
- –ø–æ—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
- –ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π, –∫–æ–≥–¥–∞ –ø—Ä–æ–ø–∞–ª –∏–∑ —Ñ–∏–¥–∞

–ù–û–í–û–ï:
1. –ì–µ–æ–∑–æ–Ω–∞:
   –º—ã –æ—Ç—Å–µ–∫–∞–µ–º –∞–≤–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫:
   LON_MIN = -117.793774
   LAT_MIN = 33.842413
   LON_MAX = -117.079663
   LAT_MAX = 34.164597

   –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç -> –º—ã —Ç–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
   –≠—Ç–æ –∑–Ω–∞—á–∏—Ç:
   - –Ω–µ —Å–æ–∑–¥–∞—ë–º Telegram-–ø–æ—Å—Ç,
   - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ state,
   - –Ω–µ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏–π –∏ —Ç.–¥.
   –¢.–µ. –±–æ—Ç –≤–æ–æ–±—â–µ –¥–µ–ª–∞–µ—Ç –≤–∏–¥, —á—Ç–æ —ç—Ç–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–µ—Ç.

2. Merge –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:
   –ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç (–¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä CHP, –¥—Ä—É–≥–∞—è area, –∏–Ω–æ–≥–¥–∞ FSP),
   –Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ (< ~100 –º) –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É,
   –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ø–¥–µ–π—Ç —Ç–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –±—ã–ª –Ω–µ –ø–æ–∑–∂–µ —á–µ–º 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥,
   —Ç–æ:
     - –ù–ï —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram,
     - –∞ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ç–µ–º –∂–µ –∫–µ–π—Å–æ–º,
     - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –°–¢–ê–†–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ,
     - –∏ –¥–µ–ª–∞–µ–º –∞–ª–∏–∞—Å: –Ω–æ–≤—ã–π –∫–ª—é—á -> —Ç–æ—Ç –∂–µ message_id.
   –¢–æ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –¥–≤–∞ –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–∞ –ø–æ–¥—Ä—è–¥ –ø—Ä–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –º–µ—Å—Ç–æ.

   –≠—Ç–æ –±–æ—Ä–µ—Ç—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π Riverside vs Riverside FSP.

3. MISSES_TO_CLOSE = 4 (–±—ã–ª–æ 2):
   –ü—Ä–µ–∂–¥–µ —á–µ–º –æ–±—ä—è–≤–∏—Ç—å "–ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç CHP", –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª
   –≤ —Å–ø–∏—Å–∫–µ 4 —Ü–∏–∫–ª–∞ –ø–æ–¥—Ä—è–¥. –≠—Ç–æ —É–º–µ–Ω—å—à–∞–µ—Ç –ª–æ–∂–Ω—ã–µ "–∑–∞–∫—Ä—ã—Ç–æ" -> "–æ–π —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—É–ª—Å—è".

4. SOLO –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:
   –ï—Å–ª–∏ –≤ –¥–µ—Ç–∞–ª—è—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è SOLO / SOLO VEH / SOLO VEH TC / SOLO VEH INTO CD –∏ —Ç.–ø.,
   –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∂–∏—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
   <b>‚ùó –°–æ–ª–æ –î–¢–ü, –Ω–µ –µ—Ö–∞—Ç—å</b>

5. "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
   –ï—Å–ª–∏ –≤ –¥–µ—Ç–∞–ª—è—Ö –≤–∏–¥–Ω–æ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ iPhone auto-crash alert / no response from caller:
     - "NO RESP FRM CALLER"
     - "IPHONE WATCH TC NOTIFICATION"
     - "IPHONE TC NOTIFICATION"
     - "CAN HEAR TRAFFIC IN BACKGROUND"
   —Ç–æ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è:
   <b>üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>

   –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ SOLO, –∏ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ —Å—Ç—Ä–æ–∫–∏, SOLO –ø–µ—Ä–≤–æ–π.

6. –ß–∏—Å—Ç—ã–π –±–ª–æ–∫ "üìå –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ / –ú–∞—à–∏–Ω—ã":
   - —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞—Ü–∏—è (–æ–±–æ—á–∏–Ω–∞ / —Å—ä–µ–∑–¥ / –ø–æ–ª–æ—Å–∞ / HOV),
   - –ø–æ—Ç–æ–º —Ç–∏–ø—ã –¢–° (—Ñ—É—Ä–∞, –º–æ—Ç–æ, –ø–∏–∫–∞–ø, –≥—Ä—É–∑–æ–≤–∏–∫),
   - –ø–æ—Ç–æ–º —Å–ª—É–∂–±—ã (—ç–≤–∞–∫—É–∞—Ç–æ—Ä, CHP, –º–µ–¥–∏–∫–∏),
   - –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –º—É—Å–æ—Ä–∞, –±–µ–∑ —Å–ª–æ–≤ "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞" –∏ –±–µ–∑ –∫–æ–¥–æ–≤.

7. –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –¥–∞—Ç—É –¥–Ω—è (UTC date), —á—Ç–æ–±—ã –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä
   (–Ω–∞–ø—Ä–∏–º–µ—Ä "0300") –∑–∞–≤—Ç—Ä–∞ –Ω–µ —Å—á–∏—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–º.

8. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π state:
   - –µ—Å–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ (–ø–æ last_seen –∏–ª–∏ first_seen),
     –º—ã –µ–≥–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
   –≠—Ç–æ –Ω–µ –¥–∞—Å—Ç "–≤–µ—á–Ω—ã–º" id –º–µ—à–∞—Ç—å, –∏ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ª–∏–ø–∞–Ω–∏–π.

ENV (.env) –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–º–æ—Ç—Ä–∏ –ø–æ—Å–ª–µ –∫–æ–¥–∞.
"""

import os
import re
import time
import json
import html
import math
import random
import logging
import hashlib
import datetime as dt
from typing import List, Dict, Optional, Tuple

import requests
from bs4 import BeautifulSoup

# ---------------------------------------------------------------------
# ENV / CONFIG
# ---------------------------------------------------------------------

try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

BASE_URL = os.getenv("CHP_URL", "https://cad.chp.ca.gov/Traffic.aspx")
COMM_CENTER = os.getenv("COMM_CENTER", "Inland")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É (Collision, Hit&Run)
TYPE_REGEX = os.getenv("TYPE_REGEX", r"(Collision|Hit\s*(?:&|and)\s*Run)")
# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ area/location (–æ–±—ã—á–Ω–æ –ø—É—Å—Ç–æ)
AREA_REGEX = os.getenv("AREA_REGEX", r"")
LOCATION_REGEX = os.getenv("LOCATION_REGEX", r"")

# –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", "30"))

# —Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø–∞—Å—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç, —á—Ç–æ–±—ã –º—ã –æ–±—ä—è–≤–∏–ª–∏ "–∑–∞–∫—Ä—ã—Ç"
MISSES_TO_CLOSE = int(os.getenv("MISSES_TO_CLOSE", "4"))

# –º–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –î–û –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è
MAX_DETAIL_CHARS_BASE = int(os.getenv("MAX_DETAIL_CHARS", "2500"))

# —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è (seen.json)
SEEN_FILE = os.getenv("SEEN_FILE", "seen.json")

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()

# Telegram –ª–∏–º–∏—Ç
TG_HARD_LIMIT = 4096

# --- –ì–µ–æ–∑–æ–Ω–∞ (–∂—ë—Å—Ç–∫–æ –ø–æ –¢–ó) ---
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: —Ç–æ–ª—å–∫–æ –≤ –Ω—ë–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã.
# –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç ‚Äî –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç.
GEO_ENABLED = True
LAT_MIN = 33.842413
LAT_MAX = 34.164597
LON_MIN = -117.793774
LON_MAX = -117.079663
DROP_IF_NO_COORDS = True  # –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–µ —à–ª—ë–º –≤–æ–æ–±—â–µ

# merge –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: –æ–∫–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
MERGE_TIME_WINDOW_MIN = 30          # –º–∏–Ω—É—Ç
MERGE_RADIUS_METERS = 100.0         # –º–µ—Ç—Ä–æ–≤

# ---------------------------------------------------------------------
# logging
# ---------------------------------------------------------------------

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("chp_bot")

HEADERS = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0 Safari/537.36"
}

# ---------------------------------------------------------------------
# Time helpers
# ---------------------------------------------------------------------

def now_utc() -> dt.datetime:
    return dt.datetime.now(dt.timezone.utc)

def utc_iso() -> str:
    return now_utc().isoformat()

def minutes_between(t1_iso: str, t2_iso: str) -> float:
    try:
        a = dt.datetime.fromisoformat(t1_iso)
        b = dt.datetime.fromisoformat(t2_iso)
        if a.tzinfo is None:
            a = a.replace(tzinfo=dt.timezone.utc)
        if b.tzinfo is None:
            b = b.replace(tzinfo=dt.timezone.utc)
        return abs((b - a).total_seconds() / 60.0)
    except Exception:
        return 999999.0

def older_than_hours(ts_iso: str, hours: float) -> bool:
    try:
        t = dt.datetime.fromisoformat(ts_iso)
        if t.tzinfo is None:
            t = t.replace(tzinfo=dt.timezone.utc)
        return (now_utc() - t).total_seconds() > hours * 3600.0
    except Exception:
        return False

# ---------------------------------------------------------------------
# Geo helpers
# ---------------------------------------------------------------------

def in_geofence(latlon: Optional[Tuple[float,float]]) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –≥–µ–æ–±–æ–∫—Å–∞.
    –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç –∏ DROP_IF_NO_COORDS=True -> False.
    """
    if not GEO_ENABLED:
        return True
    if not latlon:
        return (not DROP_IF_NO_COORDS)
    lat, lon = latlon
    if lat is None or lon is None:
        return (not DROP_IF_NO_COORDS)
    inside = (LAT_MIN <= lat <= LAT_MAX) and (LON_MIN <= lon <= LON_MAX)
    return inside

def haversine_m(lat1, lon1, lat2, lon2) -> float:
    """
    –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (lat/lon –≤ –≥—Ä–∞–¥—É—Å–∞—Ö) –≤ –º–µ—Ç—Ä–∞—Ö.
    """
    R = 6371000.0
    from math import radians, sin, cos, sqrt, asin
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1))*cos(radians(lat2))*sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    return R * c

def is_close_coords(latlon_a: Tuple[float,float],
                    latlon_b: Tuple[float,float],
                    radius_m: float) -> bool:
    la, loa = latlon_a
    lb, lob = latlon_b
    dist = haversine_m(la, loa, lb, lob)
    return dist <= radius_m

# ---------------------------------------------------------------------
# Requests with retry/backoff
# ---------------------------------------------------------------------

RETRY_MAX_ATTEMPTS = 5
RETRY_BASE_DELAY = 0.5  # sec
RETRY_MAX_DELAY = 10.0  # sec

def should_retry(resp: Optional[requests.Response], err: Optional[Exception]) -> bool:
    if err is not None:
        # network/timeout
        return True
    if resp is None:
        return True
    if resp.status_code >= 500:
        return True
    if resp.status_code in (403, 429):
        return True
    return False

def request_with_retry(method: str, url: str, session: requests.Session, **kwargs) -> requests.Response:
    attempt = 0
    while True:
        attempt += 1
        err = None
        resp = None
        try:
            resp = session.request(method, url, headers=HEADERS, timeout=30, **kwargs)
            if not should_retry(resp, None):
                return resp
            log.debug(f"HTTP {resp.status_code} -> retryable for {url}")
        except requests.RequestException as e:
            err = e
            log.debug(f"Request error (attempt {attempt}) {e}")
        if attempt >= RETRY_MAX_ATTEMPTS:
            if err:
                raise err
            else:
                resp.raise_for_status()
        back = min(
            RETRY_MAX_DELAY,
            RETRY_BASE_DELAY * (2 ** (attempt - 1))
        )
        jitter = random.uniform(0, 0.5 * back)
        sleep_for = back + jitter
        log.debug(f"Backoff {sleep_for:.2f}s before retry #{attempt+1} {url}")
        time.sleep(sleep_for)

# ---------------------------------------------------------------------
# Telegram helpers
# ---------------------------------------------------------------------

def safe_len_for_telegram(text: str) -> int:
    return len(text)

def tg_send(text: str, chat_id: Optional[str] = None) -> Optional[int]:
    chat_id = (chat_id or TELEGRAM_CHAT_ID).strip()
    if not TELEGRAM_TOKEN or not chat_id:
        log.warning("TELEGRAM_TOKEN/CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return None
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "disable_web_page_preview": True,
        "parse_mode": "HTML"
    }
    r = requests.post(api, data=payload, timeout=20)
    if r.status_code != 200:
        log.error("Telegram send %s %s", r.status_code, r.text[:400])
        return None
    try:
        return int(r.json()["result"]["message_id"])
    except Exception:
        return None

def tg_edit(message_id: int, text: str, chat_id: Optional[str] = None) -> bool:
    chat_id = (chat_id or TELEGRAM_CHAT_ID).strip()
    if not TELEGRAM_TOKEN or not chat_id or not message_id:
        return False
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText"
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "disable_web_page_preview": True,
        "parse_mode": "HTML"
    }
    r = requests.post(api, data=payload, timeout=20)
    if r.status_code != 200:
        log.error("Telegram edit %s %s", r.status_code, r.text[:400])
        return False
    return True

# ---------------------------------------------------------------------
# State load/save with cleanup
# ---------------------------------------------------------------------

def load_state() -> Dict[str, dict]:
    try:
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data
    except Exception:
        pass
    return {}

def save_state(state: Dict[str, dict]) -> None:
    # —á–∏—Å—Ç–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 24—á
    to_del = []
    for k, st in state.items():
        if not isinstance(st, dict):
            continue
        ts = st.get("last_seen") or st.get("first_seen")
        if ts and older_than_hours(ts, 24.0):
            to_del.append(k)
    for k in to_del:
        del state[k]

    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

# ---------------------------------------------------------------------
# ASP.NET form helpers
# ---------------------------------------------------------------------

def extract_form_state(soup: BeautifulSoup):
    form = soup.find("form")
    if not form:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω <form> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    action = form.get("action") or BASE_URL
    payload = {}
    for inp in form.find_all("input"):
        name = inp.get("name")
        if not name:
            continue
        t = (inp.get("type") or "").lower()
        if t in ("submit", "button", "image"):
            continue
        if t in ("checkbox", "radio"):
            if inp.has_attr("checked"):
                payload[name] = inp.get("value", "on")
        else:
            payload[name] = inp.get("value", "")
    for sel in form.find_all("select"):
        n = sel.get("name")
        if not n:
            continue
        opt = sel.find("option", selected=True) or sel.find("option")
        if opt:
            payload[n] = opt.get("value", opt.get_text(strip=True))
    for ta in form.find_all("textarea"):
        n = ta.get("name")
        if not n:
            continue
        payload[n] = ta.get_text()
    return action, payload

def choose_communications_center(session: requests.Session, center_name: str) -> str:
    r = request_with_retry("GET", BASE_URL, session)
    soup = BeautifulSoup(r.text, "html.parser")
    action, payload = extract_form_state(soup)

    def looks_like_comm_select(sel) -> bool:
        text = (sel.find_previous(string=True) or "") + " " + (sel.find_next(string=True) or "")
        return "communications" in str(text).lower() and "center" in str(text).lower()

    selects = soup.find_all("select")
    if not selects:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ <select> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    comm_select = next((s for s in selects if looks_like_comm_select(s)), selects[0])

    option_value = None
    target = center_name.strip().lower()
    for opt in comm_select.find_all("option"):
        label = opt.get_text(strip=True).lower()
        if target in label:
            option_value = opt.get("value") or opt.get_text(strip=True)
            break
    if not option_value:
        raise RuntimeError(f"–ù–µ –Ω–∞—à—ë–ª Communications Center '{center_name}'")
    payload[comm_select.get("name")] = option_value

    # submit
    form = soup.find("form")
    submit_name = submit_value = None
    for btn in form.find_all("input", {"type": "submit"}):
        val = (btn.get("value") or "").strip().lower()
        if val in ("ok", "submit", "go"):
            submit_name = btn.get("name")
            submit_value = btn.get("value")
            break
    if not submit_name:
        btn = form.find("input", {"type": "submit"})
        if btn:
            submit_name = btn.get("name")
            submit_value = btn.get("value", "OK")
    if submit_name:
        payload[submit_name] = submit_value

    post_url = requests.compat.urljoin(BASE_URL, action)
    r2 = request_with_retry("POST", post_url, session, data=payload)
    return r2.text

# ---------------------------------------------------------------------
# Incidents table parsing
# ---------------------------------------------------------------------

def find_incidents_table(soup: BeautifulSoup):
    for table in soup.find_all("table"):
        header = table.find("tr")
        if not header:
            continue
        headers = [h.get_text(strip=True).lower() for h in header.find_all(["th", "td"])]
        if headers and all(x in headers for x in ["time", "type", "location"]):
            return table
    return None

def parse_incidents_with_postbacks(html_text: str):
    soup = BeautifulSoup(html_text, "html.parser")
    table = find_incidents_table(soup)
    if not table:
        return soup, []
    rows = table.find_all("tr")[1:]
    incs = []
    for row in rows:
        cols = row.find_all("td")
        if len(cols) < 7:
            continue
        a = cols[0].find("a")
        postback = None
        if a and a.get("href", "").startswith("javascript:__doPostBack"):
            m = re.search(r"__doPostBack\('([^']+)','([^']*)'\)", a["href"])
            if m:
                postback = {"target": m.group(1), "argument": m.group(2)}
        incs.append({
            "no": cols[1].get_text(strip=True),
            "time": cols[2].get_text(strip=True),
            "type": cols[3].get_text(strip=True),
            "location": cols[4].get_text(strip=True),
            "locdesc": cols[5].get_text(strip=True),
            "area": cols[6].get_text(strip=True),
            "postback": postback
        })
    return soup, incs

# ---------------------------------------------------------------------
# Details parsing
# ---------------------------------------------------------------------

TIME_RE = re.compile(r'^\d{1,2}:\d{2}\s*(?:AM|PM)$', re.I)
FOOTER_PATTERNS = [
    r'^Click on Details for additional information\.',
    r'^Your screen will refresh in \d+ seconds\.$',
    r'^Contact Us$', r'^CHP Home Page$', r'^CHP Mobile Traffic$', r'^\|$'
]
FOOTER_RE = re.compile("|".join(FOOTER_PATTERNS), re.I)

def extract_coords_from_details_html(soup: BeautifulSoup) -> Optional[Tuple[float, float]]:
    label = soup.find(string=re.compile(r"Lat\s*/?\s*Lon", re.IGNORECASE))
    a = None
    if label:
        par = getattr(label, "parent", None)
        if par:
            a = par.find("a", href=True) or par.find_next("a", href=True)
    if not a:
        a = soup.find("a", href=True, string=re.compile(r"[-+]?\d+(?:\.\d+)?\s+[-+]?\d+(?:\.\d+)?"))
    if not a:
        return None
    nums = re.findall(r"[-+]?\d+(?:\.\d+)?", a.get_text(strip=True))
    if len(nums) >= 2:
        lat, lon = float(nums[0]), float(nums[1])
        if -90 <= lat <= 90 and -180 <= lon <= 180:
            return (lat, lon)
    return None

def extract_detail_lines(soup: BeautifulSoup) -> Optional[List[str]]:
    flat = soup.get_text("\n", strip=True)
    m_start = re.search(r"(?im)^Detail Information$", flat)
    if not m_start:
        return None
    start = m_start.end()
    m_end = re.search(r"(?im)^(Unit Information|Close)$", flat[start:])
    end = start + (m_end.start() if m_end else len(flat)-start)
    block = flat[start:end]
    lines = []
    for raw in block.splitlines():
        s = " ".join(raw.split()).strip()
        if s:
            lines.append(s)
    return lines or None

def condense_detail_lines(lines: List[str]) -> List[str]:
    out = []
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if not line or FOOTER_RE.search(line):
            i += 1
            continue
        if TIME_RE.match(line):
            t = line
            j = i + 1
            if j < len(lines) and re.match(r'^\d+$', lines[j].strip()):
                j += 1
            desc = None
            if j < len(lines):
                cand = lines[j].strip()
                cand = re.sub(r'^\[\d+\]\s*', '', cand)
                if cand and not FOOTER_RE.search(cand):
                    desc = cand
            if desc:
                out.append(f"{t}: {desc}")
                i = j + 1
                continue
            i += 1
            continue
        i += 1
    return out

def blockquote_from_lines(clean_lines: List[str], cap_chars: int) -> str:
    if not clean_lines:
        return "<blockquote>No details</blockquote>"
    acc = ""
    for ln in clean_lines:
        piece = html.escape(ln)
        cand = acc + ("" if not acc else "\n") + piece
        if len(cand) > cap_chars:
            acc += ("\n" if acc else "") + "‚Ä¶ (truncated)"
            break
        acc = cand
    return f"<blockquote>{acc}</blockquote>"

def fetch_details_by_postback(session: requests.Session,
                              action_url: str,
                              base_payload: Dict[str, str],
                              target: str,
                              argument: str):
    payload = base_payload.copy()
    payload["__EVENTTARGET"] = target
    payload["__EVENTARGUMENT"] = argument

    # –∞–Ω—Ç–∏-–±–∞–Ω –¥–∂–∏—Ç—Ç–µ—Ä –º–µ–∂–¥—É –ø–æ—Å—Ç–±—ç–∫–∞–º–∏
    time.sleep(random.uniform(0.5, 1.5))

    post_url = requests.compat.urljoin(BASE_URL, action_url)
    r = request_with_retry("POST", post_url, session, data=payload)
    soup = BeautifulSoup(r.text, "html.parser")
    coords = extract_coords_from_details_html(soup)
    lines = extract_detail_lines(soup)
    clean = condense_detail_lines(lines) if lines else None
    return coords, (clean or [])

# ---------------------------------------------------------------------
# Rich facts extraction
# ---------------------------------------------------------------------

AUTO_NOTIFY_RE = re.compile(
    r"(NO RESP FRM CALLER|IPHONE (WATCH )?TC NOTIFICATION|CAN HEAR TRAFFIC IN BACKGROUND)",
    re.I
)
SOLO_RE = re.compile(
    r"\bSOLO\b|\bSOLO\s+VEH\b|\bSOLO\s+VEH\s+TC\b|\bSOLO\s+VEH\s+INTO\b",
    re.I
)

def parse_rich_facts(detail_lines: Optional[List[str]]) -> dict:
    """
    –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ Detail Information.
    'blocked' –º—ã —Ö—Ä–∞–Ω–∏–º, –Ω–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    facts = {
        "vehicles": None,
        "vehicle_tags": set(),  # {'–º–æ—Ç–æ—Ü–∏–∫–ª','—Ñ—É—Ä–∞','–ø–∏–∫–∞–ø','–≥—Ä—É–∑–æ–≤–∏–∫'}
        "loc_label": None,      # '–ø—Ä–∞–≤–∞—è –æ–±–æ—á–∏–Ω–∞','–ª–µ–≤–∞—è –æ–±–æ—á–∏–Ω–∞','CD'
        "lane_nums": set(),
        "hov": False,
        "blocked": False,       # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        "ramp": None,           # 'on-ramp'|'off-ramp'|'exit'
        "driveable": None,      # True/False/None
        "chp_on": False,
        "chp_enrt": False,
        "fire_on": False,
        "tow": None,            # 'requested'|'enroute'|'on_scene'
        "last_time_hint": None,
        "solo": False,
        "auto_notify": False,
    }

    if not detail_lines:
        return facts

    full_text = " ".join(detail_lines)
    up = full_text.upper()

    # SOLO?
    if SOLO_RE.search(full_text):
        facts["solo"] = True

    # –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?
    if AUTO_NOTIFY_RE.search(full_text):
        facts["auto_notify"] = True

    # –õ–æ–∫–∞—Ü–∏—è
    if re.search(r"\bRS\b|\bRIGHT SHOULDER\b", up):
        facts["loc_label"] = "–ø—Ä–∞–≤–∞—è –æ–±–æ—á–∏–Ω–∞"
    if re.search(r"\bLS\b|\bLEFT SHOULDER\b", up):
        facts["loc_label"] = "–ª–µ–≤–∞—è –æ–±–æ—á–∏–Ω–∞"
    if re.search(r"\bCD\b|\bCENTER DIVIDER\b", up):
        facts["loc_label"] = "CD"

    if re.search(r"\bON[- ]?RAMP\b", up):
        facts["ramp"] = "on-ramp"
    if re.search(r"\bOFF[- ]?RAMP\b", up):
        facts["ramp"] = "off-ramp"
    if re.search(r"\bEXIT\b", up):
        facts["ramp"] = "exit"
    if re.search(r"\bHOV\b", up):
        facts["hov"] = True

    # –∫–∞–∫–∏–µ –ø–æ–ª–æ—Å—ã
    for m in re.finditer(r"#\s*(\d+)", up):
        facts["lane_nums"].add(m.group(1))

    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if re.search(r"\bBLKG?\b|\bBLOCK(ED|ING)\b|\bALL LNS STOPPED\b", up):
        facts["blocked"] = True
    if re.search(r"\b1125\b\s+(IN|#)", up):
        facts["blocked"] = True

    # –∫–∞–∫–∏–µ –¢–°
    if re.search(r"\bMC\b|\bMOTORCYCLE\b", up):
        facts["vehicle_tags"].add("–º–æ—Ç–æ—Ü–∏–∫–ª")
    if re.search(r"\bSEMI\b|\bBIG\s*RIG\b|\bTRACTOR TRAILER\b", up):
        facts["vehicle_tags"].add("—Ñ—É—Ä–∞")
    if re.search(r"\bTRK\b|\bTRUCK\b", up):
        facts["vehicle_tags"].add("–≥—Ä—É–∑–æ–≤–∏–∫")
    if re.search(r"\bPK\b|\bPICK ?UP\b", up):
        facts["vehicle_tags"].add("–ø–∏–∫–∞–ø")

    # —Å–∫–æ–ª—å–∫–æ –¢–°
    nums = [int(n) for n in re.findall(r"\b(\d{1,2})\s*VEHS?\b", up)]
    if nums:
        facts["vehicles"] = max(nums)
    elif "SOLO VEH" in up or "SOLO VEHICLE" in up or "SOLO TC" in up:
        facts["vehicles"] = 1
    else:
        vs_line = next((ln for ln in detail_lines if re.search(r"\bVS\b", ln.upper())), None)
        if vs_line:
            parts = [p for p in re.split(r"\bVS\b", vs_line.upper()) if p.strip()]
            if len(parts) >= 2:
                facts["vehicles"] = max(facts["vehicles"] or 0, len(parts))

    # Driveable
    if re.search(r"\bNOT\s*DRIV(?:E|)ABLE\b|\bUNABLE TO MOVE VEH", up):
        facts["driveable"] = False
    elif re.search(r"\bVEH\s+IS\s+DRIVABLE\b|\bDRIVABLE\b", up):
        facts["driveable"] = True

    # –°–ª—É–∂–±—ã / —ç–≤–∞–∫—É–∞—Ç–æ—Ä
    # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è "–≤ XX:XX –≤—ã–∑–≤–∞–ª–∏ —ç–≤–∞–∫—É–∞—Ç–æ—Ä"
    time_marks = re.findall(r'\b\d{1,2}:\d{2}\s*(?:AM|PM)\b', full_text, flags=re.I)
    last_tmark = time_marks[-1] if time_marks else None
    facts["last_time_hint"] = last_tmark

    # CHP:
    # 97 = –Ω–∞ –º–µ—Å—Ç–µ, ENRT = –≤ –ø—É—Ç–∏
    if re.search(r"\b97\b", up):
        facts["chp_on"] = True
    if re.search(r"\bENRT\b", up):
        facts["chp_enrt"] = True
    # FIRE/1141 -> –ø–æ–∂–∞—Ä–Ω—ã–µ/–º–µ–¥–∏–∫–∏
    if re.search(r"\bFIRE\b|\b1141\b", up):
        facts["fire_on"] = True

    # Tow 1185:
    if re.search(r"\bREQ\s+1185\b|\bSTART\s+1185\b", up):
        facts["tow"] = "requested"
    if re.search(r"\b1185\b.*\bENRT\b", up):
        facts["tow"] = "enroute"
    if re.search(r"\b1185\s+97\b|\bTOW\b.*\b97\b", up):
        facts["tow"] = "on_scene"

    return facts

# ---------------------------------------------------------------------
# Human summary + formatting helpers
# ---------------------------------------------------------------------

def _compact_lanes(lanes: set) -> str:
    """
    {1,2,3} -> '#1‚Äì#3'; {1,3,5} -> '#1,#3,#5'
    """
    if not lanes:
        return ""
    nums = sorted(int(x) for x in lanes if x.isdigit())
    if not nums:
        return ""
    spans = []
    start = prev = nums[0]
    for n in nums[1:]:
        if n == prev + 1:
            prev = n
            continue
        spans.append((start, prev))
        start = prev = n
    spans.append((start, prev))
    parts = []
    for a, b in spans:
        parts.append(f"#{a}" if a == b else f"#{a}‚Äì#{b}")
    return ", ".join(parts)

def _unique_join(parts: list, sep: str = ", ") -> str:
    seen, out = set(), []
    for p in parts:
        p = p.strip()
        if not p or p in seen:
            continue
        seen.add(p)
        out.append(p)
    return sep.join(out)

def human_summary_from_facts(facts: dict) -> tuple[str, set]:
    """
    summary_line (–∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞)
    consumed_keys (—á—Ç–æ –º—ã —É–∂–µ —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
    """
    consumed = set()
    bits = []

    # —Å–∫–æ–ª—å–∫–æ –∏ –∫–∞–∫–∏–µ –¢–°
    v = facts.get("vehicles")
    tags = list(sorted(facts.get("vehicle_tags") or []))  # "–º–æ—Ç–æ—Ü–∏–∫–ª", "—Ñ—É—Ä–∞", ...
    veh_phrase = None
    if v is not None and v > 0:
        if tags:
            veh_phrase = f"{v} –º–∞—à. ({', '.join(tags)})"
            consumed.update({"vehicles", "vehicle_tags"})
        else:
            veh_phrase = f"{v} –º–∞—à."
            consumed.add("vehicles")
    elif tags:
        veh_phrase = _unique_join(tags, " / ")
        consumed.add("vehicle_tags")
    if veh_phrase:
        bits.append(veh_phrase)

    # –≥–¥–µ —Å—Ç–æ—è—Ç
    loc = facts.get("loc_label")   # –ø—Ä–∞–≤–∞—è –æ–±–æ—á–∏–Ω–∞ / –ª–µ–≤–∞—è / CD
    ramp = facts.get("ramp")       # on-ramp/off-ramp/exit
    lane = _compact_lanes(facts.get("lane_nums") or set())
    where_parts = []
    if ramp:
        where_parts.append("—Å—ä–µ–∑–¥")
    if loc:
        where_parts.append(loc)
    if lane:
        where_parts.append(f"–ø–æ–ª–æ—Å–∞ {lane}")
    if facts.get("hov"):
        where_parts.append("HOV")
    if where_parts:
        bits.append(_unique_join(where_parts, ", "))
        consumed.update({"loc_label", "ramp", "lane_nums"})

    # —Ö–æ–¥–æ–≤—ã–µ –∏–ª–∏ –Ω–µ—Ç
    if facts.get("driveable") is True:
        bits.append("–Ω–∞ —Ö–æ–¥—É")
        consumed.add("driveable")
    elif facts.get("driveable") is False:
        bits.append("–Ω–µ –Ω–∞ —Ö–æ–¥—É")
        consumed.add("driveable")

    # —Å–ª—É–∂–±—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —ç–≤–∞–∫—É–∞—Ç–æ—Ä -> CHP -> –º–µ–¥–∏–∫–∏)
    tmark = facts.get("last_time_hint") or ""
    tow = facts.get("tow")
    if tow == "requested":
        bits.append("—ç–≤–∞–∫—É–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω" + (f" ({tmark})" if tmark else ""))
        consumed.add("tow")
    elif tow == "enroute":
        bits.append("—ç–≤–∞–∫—É–∞—Ç–æ—Ä –≤ –ø—É—Ç–∏" + (f" ({tmark})" if tmark else ""))
        consumed.add("tow")
    elif tow == "on_scene":
        bits.append("—ç–≤–∞–∫—É–∞—Ç–æ—Ä –Ω–∞ –º–µ—Å—Ç–µ" + (f" ({tmark})" if tmark else ""))
        consumed.add("tow")

    if facts.get("chp_on"):
        bits.append("–æ—Ñ–∏—Ü–µ—Ä—ã CHP –Ω–∞ –º–µ—Å—Ç–µ")
        consumed.update({"chp_on", "chp_enrt"})
    elif facts.get("chp_enrt"):
        bits.append("–æ—Ñ–∏—Ü–µ—Ä—ã CHP –≤ –ø—É—Ç–∏")
        consumed.add("chp_enrt")

    if facts.get("fire_on"):
        bits.append("–º–µ–¥–∏–∫–∏/–ø–æ–∂–∞—Ä–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ")
        consumed.add("fire_on")

    summary = _unique_join(bits, ", ")
    return (summary, consumed)

# ---------------------------------------------------------------------
# Text builder
# ---------------------------------------------------------------------

def build_warning_prefix(facts: dict) -> str:
    """
    –ü–µ—Ä–≤–∞—è(—ã–µ) —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–º:
    - SOLO –î–¢–ü
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    SOLO –∏–¥—ë—Ç –ø–µ—Ä–≤–æ–π, –∑–∞—Ç–µ–º –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    lines = []
    if facts.get("solo"):
        lines.append("<b>‚ùó –°–æ–ª–æ –î–¢–ü, –Ω–µ –µ—Ö–∞—Ç—å</b>")
    if facts.get("auto_notify"):
        lines.append("<b>üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>")
    if not lines:
        return ""
    return "\n".join(lines) + "\n"

def make_text(inc: Dict[str, str],
              latlon: Optional[Tuple[float, float]],
              details_lines_clean: List[str],
              facts: dict,
              closed: bool = False) -> str:
    # –∏–∫–æ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É
    icon = ""
    if "Collision" in inc['type']:
        icon = "üö®"
    elif "Hit" in inc['type'] and "Run" in inc['type']:
        icon = "üöó"

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–≤—Ä–µ–º—è | area, –ø–æ—Ç–æ–º —Ç–∏–ø, –ø–æ—Ç–æ–º –∞–¥—Ä–µ—Å)
    head_core = (
        f"‚è≥ {html.escape(inc['time'])} | üèô {html.escape(inc['area'])}\n"
        f"{icon} {html.escape(inc['type'])}\n\n"
        f"üìç {html.escape(inc['location'])} ‚Äî {html.escape(inc['locdesc'])}"
    )

    # —Å–ø–µ—Ü –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (solo / auto-notify)
    warning_prefix = build_warning_prefix(facts)
    head = warning_prefix + head_core

    # —Ä–µ–∑—é–º–µ —Ñ–∞–∫—Ç–æ–≤
    summary_line, consumed = human_summary_from_facts(facts)

    # –î–æ–ø. –º–∞—Ä–∫–µ—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤):
    markers = []

    # 1. –õ–æ–∫–∞—Ü–∏—è
    loc_bits = []
    if "loc_label" not in consumed and facts.get("loc_label"):
        loc_bits.append(facts["loc_label"])
    if "ramp" not in consumed and facts.get("ramp"):
        loc_bits.append("—Å—ä–µ–∑–¥")
    if "lane_nums" not in consumed and facts.get("lane_nums"):
        lane = _compact_lanes(facts["lane_nums"])
        if lane:
            loc_bits.append(f"–ø–æ–ª–æ—Å–∞ {lane}")
    if facts.get("hov"):
        loc_bits.append("HOV")
    loc_bits = [_ for _ in loc_bits if _]
    if loc_bits:
        markers.append(_unique_join(loc_bits, " ¬∑ "))

    # 2. –¢–∏–ø—ã –º–∞—à–∏–Ω / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    veh_bits = []
    if "vehicles" not in consumed and facts.get("vehicles") is not None:
        veh_bits.append(f"{facts['vehicles']} –¢–°")
    if "vehicle_tags" not in consumed and facts.get("vehicle_tags"):
        veh_bits.append(", ".join(sorted(facts["vehicle_tags"])))
    veh_bits = [_ for _ in veh_bits if _]
    if veh_bits:
        markers.append(" / ".join(veh_bits))

    # 3. –°–ª—É–∂–±—ã/—Å—Ç–∞—Ç—É—Å—ã
    st_bits = []
    if "tow" not in consumed and facts.get("tow"):
        if facts["tow"] == "requested":
            st_bits.append("—ç–≤–∞–∫—É–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω")
        elif facts["tow"] == "enroute":
            st_bits.append("—ç–≤–∞–∫—É–∞—Ç–æ—Ä –≤ –ø—É—Ç–∏")
        elif facts["tow"] == "on_scene":
            st_bits.append("—ç–≤–∞–∫—É–∞—Ç–æ—Ä –Ω–∞ –º–µ—Å—Ç–µ")
    if "chp_on" not in consumed and facts.get("chp_on"):
        st_bits.append("–æ—Ñ–∏—Ü–µ—Ä—ã CHP –Ω–∞ –º–µ—Å—Ç–µ")
    elif "chp_enrt" not in consumed and facts.get("chp_enrt"):
        st_bits.append("–æ—Ñ–∏—Ü–µ—Ä—ã CHP –≤ –ø—É—Ç–∏")
    if "fire_on" not in consumed and facts.get("fire_on"):
        st_bits.append("–º–µ–¥–∏–∫–∏/–ø–æ–∂–∞—Ä–Ω—ã–µ")
    if "driveable" not in consumed:
        if facts.get("driveable") is True:
            st_bits.append("–Ω–∞ —Ö–æ–¥—É")
        elif facts.get("driveable") is False:
            st_bits.append("–Ω–µ –Ω–∞ —Ö–æ–¥—É")
    st_bits = [_ for _ in st_bits if _]
    if st_bits:
        markers.append(_unique_join(st_bits, ", "))

    facts_block_lines = []
    if summary_line:
        facts_block_lines.append(summary_line)
    if markers:
        facts_block_lines.append(" | ".join(markers))

    facts_block = ""
    if facts_block_lines:
        facts_block = "\n\n<b>üìå –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ / –ú–∞—à–∏–Ω—ã:</b>\n" + "\n".join(facts_block_lines)

    # –∫–∞—Ä—Ç–∞ (–º–µ—Ç–∫–∞, –Ω–µ –º–∞—Ä—à—Ä—É—Ç)
    if latlon:
        lat, lon = latlon
        map_url = f"https://www.google.com/maps/search/?api=1&query={lat:.6f},{lon:.6f}"
        route_block = f"\n\n<b>üó∫Ô∏è –ö–∞—Ä—Ç–∞:</b>\n{map_url}"
    else:
        route_block = "\n\n<b>üó∫Ô∏è –ö–∞—Ä—Ç–∞:</b>\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–µ–∂–µ–º –¥–µ—Ç–∞–ª–∏, —á—Ç–æ–± –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å 4096
    skeleton = head + facts_block + route_block
    leftover = TG_HARD_LIMIT \
        - len(skeleton) \
        - len("\n\n<b>üìù Detail Information:</b>\n") \
        - (len("\n\n<b>‚ùóÔ∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç CHP</b>") if closed else 0)

    cap = max(0, min(MAX_DETAIL_CHARS_BASE, leftover))
    details_block = blockquote_from_lines(details_lines_clean, cap) if cap > 0 else ""
    det_block = f"\n\n<b>üìù Detail Information:</b>\n{details_block}" if details_block else ""

    text = skeleton + det_block
    if closed:
        text += "\n\n<b>‚ùóÔ∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç CHP</b>"

    # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ ‚Äî –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å—ë —Ä–∞–≤–Ω–æ >4096
    if len(text) > TG_HARD_LIMIT and det_block:
        shrink = int(cap * 0.8)
        details_block = blockquote_from_lines(details_lines_clean, max(0, shrink))
        det_block = f"\n\n<b>üìù Detail Information:</b>\n{details_block}" if details_block else ""
        text = skeleton + det_block
        if closed:
            text += "\n\n<b>‚ùóÔ∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç CHP</b>"

    return text

def signature_for_update(day_key: str,
                         inc: Dict[str, str],
                         details_lines_clean: List[str],
                         facts: dict) -> str:
    """
    –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç "—Å–∏–ª—å–Ω–æ –ª–∏ –ø–æ–º–µ–Ω—è–ª–æ—Å—å".
    –í–∫–ª—é—á–∞–µ–º day_key (YYYY-MM-DD), —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É –¥–Ω—è–º–∏.
    """
    norm_details = "\n".join(details_lines_clean or []).strip()
    fact_key = "|".join([
        str(facts.get("vehicles")),
        ",".join(sorted((facts.get("vehicle_tags") or set()))),
        facts.get("loc_label") or "",
        ",".join(sorted((facts.get("lane_nums") or set()))),
        "HOV" if facts.get("hov") else "",
        "BLK" if facts.get("blocked") else "",
        facts.get("ramp") or "",
        "DRV1" if facts.get("driveable") is True else ("DRV0" if facts.get("driveable") is False else ""),
        "C97" if facts.get("chp_on") else ("CENRT" if facts.get("chp_enrt") else ""),
        "FIRE" if facts.get("fire_on") else "",
        {"requested":"TREQ","enroute":"TENRT","on_scene":"T97"}.get(facts.get("tow") or "", ""),
        "SOLO" if facts.get("solo") else "",
        "AUTO" if facts.get("auto_notify") else "",
    ])
    base = (
        day_key + "||" +
        inc.get("type","").strip() + "||" +
        norm_details + "||" +
        fact_key
    ).encode("utf-8", "ignore")
    return hashlib.sha1(base).hexdigest()

# ---------------------------------------------------------------------
# Helper: merge / alias logic
# ---------------------------------------------------------------------

def find_nearby_active_incident(state: Dict[str, dict],
                                latlon: Tuple[float,float],
                                now_iso: str) -> Optional[str]:
    """
    –ò—â–µ–º –≤ state –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π:
      - –∏–º–µ–µ—Ç latlon –±–ª–∏–∑–∫–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (< MERGE_RADIUS_METERS)
      - –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω < MERGE_TIME_WINDOW_MIN –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      - –ù–ï –∑–∞–∫—Ä—ã—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–ª—é—á, –µ—Å–ª–∏ –Ω–∞—à–ª–∏.
    """
    for k, st in state.items():
        if not isinstance(st, dict):
            continue
        if st.get("closed"):
            continue
        st_latlon = st.get("latlon")
        if not st_latlon or len(st_latlon) != 2:
            continue
        # –≤—Ä–µ–º—è —Å–≤–µ–∂–µ—Å—Ç–∏
        last_seen = st.get("last_seen") or st.get("first_seen")
        if not last_seen:
            continue
        age_min = minutes_between(last_seen, now_iso)
        if age_min > MERGE_TIME_WINDOW_MIN:
            continue
        # –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        if is_close_coords(latlon, tuple(st_latlon), MERGE_RADIUS_METERS):
            return k
    return None

def attach_alias(state: Dict[str, dict],
                 alias_key: str,
                 master_key: str) -> None:
    """
    alias_key -> —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ—Ç –∂–µ Telegram message_id –∏ —Ç.–¥. —á—Ç–æ master_key.
    –ü–æ —Å—É—Ç–∏ –º—ã –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    master = state.get(master_key)
    if not master:
        return
    state[alias_key] = {
        "message_id": master.get("message_id"),
        "chat_id": master.get("chat_id"),
        "last_sig": master.get("last_sig"),
        "last_text": master.get("last_text"),
        "closed": master.get("closed", False),
        "misses": 0,
        "first_seen": master.get("first_seen"),
        "last_seen": utc_iso(),
        "latlon": master.get("latlon"),
        "master_of": master_key  # —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å —á–µ–π –æ–Ω –∞–ª–∏–∞—Å
    }

def update_master_from_alias_merge(master_rec: dict,
                                   new_text: str,
                                   new_sig: str,
                                   latlon: Optional[Tuple[float,float]]):
    """
    –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä –ø–æ—Å–ª–µ merge (—á—Ç–æ–±—ã last_text / last_sig –±—ã–ª–∏ –Ω–æ–≤—ã–µ).
    """
    master_rec["last_text"] = new_text
    master_rec["last_sig"] = new_sig
    master_rec["closed"] = False
    master_rec["misses"] = 0
    master_rec["last_seen"] = utc_iso()
    if latlon:
        master_rec["latlon"] = list(latlon)

# ---------------------------------------------------------------------
# Main loop
# ---------------------------------------------------------------------

def main():
    log.info(f"CHP notifier v9 | Center={COMM_CENTER} | Interval={POLL_INTERVAL}s | GeoFilter=ON | Merge=30min")

    state = load_state()
    session = requests.Session()

    while True:
        cycle_seen_ids = set()
        day_key = dt.datetime.utcnow().strftime("%Y-%m-%d")
        now_iso_str = utc_iso()

        try:
            html_text = choose_communications_center(session, COMM_CENTER)
            soup, incidents = parse_incidents_with_postbacks(html_text)
            action_url, base_payload = extract_form_state(soup)

            # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É/–ª–æ–∫–∞—Ü–∏–∏/–∞—Ä–µ–∞ –∑–∞—Ä–∞–Ω–µ–µ
            type_re = re.compile(TYPE_REGEX, re.I) if TYPE_REGEX else None
            area_re = re.compile(AREA_REGEX, re.I) if AREA_REGEX else None
            loc_re  = re.compile(LOCATION_REGEX, re.I) if LOCATION_REGEX else None

            for inc in incidents:
                # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É/–∞—Ä–µ–∞/–ª–æ–∫–∞—Ü–∏–∏
                if type_re and not type_re.search(inc["type"]):
                    continue
                if area_re and not area_re.search(inc["area"]):
                    continue
                if loc_re and not (loc_re.search(inc["location"]) or loc_re.search(inc["locdesc"])):
                    continue

                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á (–Ω–æ–º–µ—Ä CHP + –¥–∞—Ç–∞ + —Ü–µ–Ω—Ç—Ä)
                # —á—Ç–æ–±—ã 0300 —Å–µ–≥–æ–¥–Ω—è != 0300 –∑–∞–≤—Ç—Ä–∞
                inc_key = f"{COMM_CENTER}:{day_key}:{inc['no']}"
                cycle_seen_ids.add(inc_key)

                # —Ç—è–Ω–µ–º details
                latlon = None
                details_lines_clean: List[str] = []
                if inc.get("postback"):
                    latlon, details_lines_clean = fetch_details_by_postback(
                        session, action_url, base_payload,
                        inc["postback"]["target"], inc["postback"]["argument"]
                    )
                else:
                    details_lines_clean = []

                # –≥–µ–æ—Ñ–∏–ª—å—Ç—Ä: –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ —Ç–æ—á–∫–∞ –≤–Ω–µ –∑–æ–Ω—ã => –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not in_geofence(latlon):
                    log.debug("skip: out of geofence %s", inc_key)
                    continue

                # —Ñ–∞–∫—Ç—ã + —Ç–µ–∫—Å—Ç
                facts = parse_rich_facts(details_lines_clean)
                text = make_text(inc, latlon, details_lines_clean, facts, closed=False)
                sig = signature_for_update(day_key, inc, details_lines_clean, facts)

                # MERGE: –µ—Å–ª–∏ —É –Ω–∞—Å –ù–ï–¢ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä—è–¥–æ–º –∞–∫—Ç–∏–≤–Ω—ã–π
                st_existing = state.get(inc_key)
                if not st_existing:
                    if latlon:
                        master_key = find_nearby_active_incident(
                            state, latlon, now_iso_str
                        )
                    else:
                        master_key = None
                else:
                    master_key = None  # —É–∂–µ –µ—Å—Ç—å, –Ω–µ –Ω–∞–¥–æ –º–µ—Ä–¥–∂–∏—Ç—å

                # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Ö–æ–∂–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä—è–¥–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                if (not st_existing) and master_key:
                    master_rec = state.get(master_key)
                    if not master_rec:
                        # —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π
                        master_key = None

                if (not st_existing) and master_key:
                    # –ú—ã –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä.
                    mid = master_rec.get("message_id")
                    if mid:
                        ok = tg_edit(mid, text, chat_id=master_rec.get("chat_id") or TELEGRAM_CHAT_ID)
                        if ok:
                            update_master_from_alias_merge(master_rec, text, sig, latlon)
                            attach_alias(state, inc_key, master_key)
                            log.info("merged %s -> %s (%s)", inc_key, master_key, inc.get("type"))
                        else:
                            # fallback: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞—á–∏—Ç—å,
                            # –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ, –∫–∞–∫ –Ω–æ–≤—ã–π
                            new_mid = tg_send(text, TELEGRAM_CHAT_ID)
                            state[inc_key] = {
                                "message_id": new_mid,
                                "chat_id": TELEGRAM_CHAT_ID,
                                "last_sig": sig,
                                "last_text": text,
                                "closed": False,
                                "misses": 0,
                                "first_seen": utc_iso(),
                                "last_seen": utc_iso(),
                                "latlon": list(latlon) if latlon else None
                            }
                            log.info("new(fallback) %s (%s)", inc_key, inc.get("type"))
                    else:
                        # –º–∞—Å—Ç–µ—Ä –±–µ–∑ message_id?? fallback –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                        new_mid = tg_send(text, TELEGRAM_CHAT_ID)
                        state[inc_key] = {
                            "message_id": new_mid,
                            "chat_id": TELEGRAM_CHAT_ID,
                            "last_sig": sig,
                            "last_text": text,
                            "closed": False,
                            "misses": 0,
                            "first_seen": utc_iso(),
                            "last_seen": utc_iso(),
                            "latlon": list(latlon) if latlon else None
                        }
                        log.info("new(fallback2) %s (%s)", inc_key, inc.get("type"))

                else:
                    # –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ new/edit
                    st = state.get(inc_key)
                    if st and st.get("message_id"):
                        # –£–∂–µ –∑–Ω–∞–µ–º –ø—Ä–æ –Ω–µ–≥–æ -> –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                        if st.get("last_sig") != sig or st.get("closed", False):
                            ok = tg_edit(st["message_id"], text,
                                         chat_id=st.get("chat_id") or TELEGRAM_CHAT_ID)
                            if ok:
                                st["last_sig"] = sig
                                st["last_text"] = text
                                st["closed"] = False
                                log.info("edited %s (%s)", inc_key, inc.get("type"))
                        st["misses"] = 0
                        st["last_seen"] = utc_iso()
                        if latlon:
                            st["latlon"] = list(latlon)
                    else:
                        # –ù–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        mid = tg_send(text, TELEGRAM_CHAT_ID)
                        state[inc_key] = {
                            "message_id": mid,
                            "chat_id": TELEGRAM_CHAT_ID,
                            "last_sig": sig,
                            "last_text": text,
                            "closed": False,
                            "misses": 0,
                            "first_seen": utc_iso(),
                            "last_seen": utc_iso(),
                            "latlon": list(latlon) if latlon else None
                        }
                        log.info("new %s (%s)", inc_key, inc.get("type"))

            # –∑–∞–∫—Ä—ã—Ç–∏—è
            for key, st in list(state.items()):
                # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –≤–æ–æ–±—â–µ —Ç–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å
                if key not in cycle_seen_ids and isinstance(st, dict):
                    st["misses"] = st.get("misses", 0) + 1
                    if st.get("closed"):
                        continue
                    if st["misses"] >= MISSES_TO_CLOSE and st.get("message_id"):
                        # –ø–æ–º–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–π
                        new_text = (st.get("last_text") or "") + "\n\n<b>‚ùóÔ∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç CHP</b>"
                        ok = tg_edit(st["message_id"], new_text,
                                     chat_id=st.get("chat_id") or TELEGRAM_CHAT_ID)
                        if ok:
                            st["last_text"] = new_text
                            st["closed"] = True
                            log.info("closed %s", key)

            save_state(state)
            log.debug("%s: rows=%d, tracked=%d", COMM_CENTER, len(incidents), len(state))

        except KeyboardInterrupt:
            log.info("Stopped by user.")
            break
        except Exception as e:
            log.error("loop error: %s", e)

        # –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –¥–∂–∏—Ç—Ç–µ—Ä
        jitter = random.uniform(2.0, 5.0)
        time.sleep(POLL_INTERVAL + jitter)

if __name__ == "__main__":
    main()
